'''
Copyright 2022 Airbus SAS

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
'''

from climateeconomics.core.core_witness.calibration.calibration_pop.base_calib_deathrate import BaseCalib
import pandas as pd
import numpy as np 
import os 

class DeathRateCalib(BaseCalib):
    """
    Calibrate death rate using formula from: 
    McIsaac, F., 2020. A Representation of the World Population Dynamics for Integrated Assessment Models. 
    Environmental Modeling & Assessment, 25(5), pp.611-632.
    """
    def __init__(self):
        super().__init__('deathrate_40-54')
        self.logger.info("")
        
    def loop_over_age(self,x, bounds):
        """For each age range in age_group compute birth rate and optimize x the parameters of the death rate function
        Return a dictionary of x_opt for each age range
        """
        age_group = pd.Series(['0-4', '5-9', '10-14', '15-19', '20-24', '25-29', '30-34', '35-39', '40-44', '45-49', '50-54', '55-59', '60-64', 
                              '65-69', '70-74', '75-79', '80-84', '85-89','90-94','95+'])
        age_group = pd.Series(['95+'])
        self.age_group = age_group
        nb_year = self.year_end - self.year_start +1 
        self.x_opt_dict = {}
        self.func_dict = {}
        for i in age_group.index:
            age = age_group[i]
            self.age = age
            self.i = i 
            #Select only rows of dataframe that concerns our age range
            death_rate_age_df = self.deathrate_df_full[self.deathrate_df_full['age'] == age]
            death_rate_age_df = death_rate_age_df[(death_rate_age_df['year']>= self.year_start) & (death_rate_age_df['year']<= self.year_end)]
            death_rate_age_df.index = death_rate_age_df['year']
            self.deathrate_df = death_rate_age_df
            #check that we have the right number of row
#             if len(death_rate_age_df) != nb_year: 
#                 print('for age group', age, 'we do not have the right number of row OUPS')
#                 raise
            
            self.death_rate_age_df = death_rate_age_df
#            if i==5:
#                 x = [5.24176011e-02, 1.76559284e-03, 4.27591378e-04, 4.03359999e+03,8.17545660e+00]
#             x[age] =  [1.5, 2.79965567e-01, 4.88923453e-04, 4.03360017e+03, 4.86257207e+00]
#             bounds = [(1.5, 3),(1e-6, 0.9), (1e-5, 1), (1000, 1e5), (1e-5, 30)]
#             if i< 9: 
#                 x[age] = [3.69086873e-01, 1.07243823e-02, 3.43270987e-03, 4.03375413e+03, 2.91003814e+00] 
            x_opt = self.optim_variable(x[age], bounds)
            self.x_opt_dict[f'{age}'] = x_opt
            self.func_dict[f'{age}'] = self.f
            self.eval_all(x_opt)
            self.plot_br_gdp()
            self.plot_deathrate_years()
        print('x_opt', self.x_opt_dict)
        print('f', self.func_dict)
        return self.x_opt_dict
            
    def loop_for_estimation(self, x_opt): 
        age_group = pd.Series(['0-4', '5-9', '10-14', '15-19', '20-24', '25-29', '30-34', '35-39', '40-44', '45-49', '50-54', '55-59', '60-64', 
                              '65-69', '70-74', '75-79', '80-84', '85-89','90-94','95+'])
        nb_year = self.year_end - self.year_start +1 
        self.x_opt_dict = {}
        self.func_dict = {}
        for i in age_group.index:
            age = age_group[i]
            self.age = age
            self.i = i  
            self.compute_estimated_death_rate(x_opt[age])     
            self.plot_estimated_dr()

    def x_opts_comparison(self, x_opt_one, x_opt_second):
        self.ihme_dr_df = pd.read_csv(os.path.join(
            self.base_path, 'data', 'ihmedeathrateforecast.csv'))
        self.ihme_dr_df = self.ihme_dr_df.set_index(self.ihme_dr_df['year'])
        self.un_dr_df = pd.read_csv(os.path.join(self.base_path, 'data', 'undeathrateproj.csv'))
        self.un_dr_df = self.un_dr_df.set_index(self.un_dr_df['year'])
        age_group = pd.Series(['0-4', '5-9', '10-14', '15-19', '20-24', '25-29', '30-34', '35-39', '40-44', '45-49', '50-54', '55-59', '60-64', 
                              '65-69', '70-74', '75-79', '80-84', '85-89','90-94'])
        age_group = pd.Series(['95+'])
        nb_year = self.year_end - self.year_start +1 
        self.x_opt_dict = {}
        self.func_dict = {}
        for i in age_group.index:
            age = age_group[i]
            self.age = age
            self.i = i  
            dr_df_one = self.compute_estimated_death_rate(x_opt_one[age])
            dr_df_sec = self.compute_estimated_death_rate(x_opt_second[age])
            self.plot_comparison_estimated_df(dr_df_one, dr_df_sec)
        
#INPUTS
#Start with inputs of paper
br_upper_a = 0.39/5
br_lower_a = 0.03/5
delta = 0.00087
phi = 4033.6
nu = 5

x_zero = [br_upper_a, br_lower_a, delta, phi, nu]
bounds = [(1e-5, 0.95),(1e-6, 0.9), (1e-5, 1), (1000, 1e5), (1e-5, 30)]
bounds = [(0.35, 3),(1e-6, 2e-1), (1e-5, 1), (1000, 1e5), (1e-5, 30)]

x_zero = {'0-4': [3.24963881e-01, 5.9212016e-03, 2.4281198e-04, 4.03360000e+03,4.99999938], 
          '5-9': [3.69086873e-02, 1.07243823e-03, 3.43270987e-04, 4.03375413e+03, 4.91003814e+00], 
          '10-14': [5.49748423e-02, 7.84921161e-04, 4.38378525e-04, 4.03360031e+03,1.25345097e+01], 
    '15-19': [8.02654265e-02, 1.19009212e-03, 4.16423930e-04, 4.03360003e+03,1.72422769e+01], 
    '20-24': [5.87498631e-02, 1.56028102e-03, 4.02997163e-04, 4.03360000e+03,1.06315702e+01], 
    '25-29': [5.24176011e-02, 1.76559284e-03, 4.27591378e-04, 4.03359999e+03,8.17545660e+00], 
    '30-34': [3.25592229e-02, 2.09464765e-03, 4.86171818e-04, 4.03360000e+03,3.86453778e+00], 
    '35-39': [4.44761855e-02, 2.61981379e-03, 5.07091843e-04, 4.03373596e+03,4.45110984e+00],
    '40-44': [1.35083145e-01, 3.21893655e-03, 4.31909200e-04, 4.03360001e+03,1.21430009e+01], 
    '45-49': [1.01010195e-01, 4.20779214e-03, 3.63350295e-04, 4.03360002e+03,7.55868511e+00], 
    '50-54': [2.09280401e-01, 6.01837133e-03, 2.96792969e-04, 4.03359970e+03,1.33869641e+01],
    '55-59': [1.32551749e-01, 8.97923924e-03, 2.90232355e-04, 4.03360000e+03,5.87057861e+00], 
    '60-64': [1.81384663e-01, 1.36457588e-02, 2.63154409e-04, 4.03361279e+03,5.38380671e+00],
    '65-69': [2.45301795e-01, 2.12946562e-02, 2.63543271e-04, 4.03359993e+03,5.01690751e+00],
    '70-74': [3.45148622e-01, 3.37532383e-02, 2.39832268e-04, 4.03359992e+03,5.01716208e+00],
    '75-79': [4.93991134e-01, 5.07264139e-02, 2.13571030e-04, 4.03360000e+03,4.93760303e+00], 
    '80-84': [7.22843595e-01, 6.95946134e-02, 1.62187127e-04, 4.03360002e+03,4.83421470e+00], 
    '85-89': [8.50000000e-01, 1.06668629e-01, 1.46459548e-04, 4.03360005e+03,4.39869966e+00], 
    '90-94': [8.50000000e-01, 1.61228183e-01, 1.35219147e-04, 4.03360000e+03,3.79384134e+00], 
    '95+': [8.14900142e-01, 2.81334780e-01, 3.93510108e-04, 4.03360017e+03,4.86232766e+00]}

calib = DeathRateCalib()
x_opt_sec = calib.loop_over_age(x_zero, bounds)

# x_test = [0.8, 0.05, 1e-5, 4033, 1e-5]
# x_test = [8.00000000e-01, 5.00000000e-01, 1.00000000e-05,4.03360153e03, 1.00000000e-05]
# calib.eval_all(x_test)

#TEST X_OP 
# x_opt_sec = {'0-4': [2.09538542e-01, 2.28795601e-03, 1.84190989e-04, 4.03375616e+03,
#        3.21676438e+00], '5-9': [2.16320231e-02, 1.25091149e-04, 1.80743111e-04, 4.03375404e+03,
#        2.98169931e+00], '10-14': [1.39321843e-02, 1.65097280e-04, 1.60845247e-04, 4.03375409e+03,
#        3.87881670e+00], '15-19': [1.31748885e-02, 3.28812779e-04, 1.44209714e-04, 4.03375519e+03,
#        2.97337561e+00], '20-24': [1.63860340e-02, 5.47120755e-04, 1.42380015e-04, 4.03395070e+03,
#        3.10357901e+00], '25-29': [1.73774564e-02, 7.02850707e-04, 1.44606829e-04, 4.03375763e+03,
#        3.06036465e+00], '30-34': [1.89198980e-02, 1.00662236e-03, 1.55104245e-04, 4.03374579e+03,
#        3.04967065e+00], '35-39': [2.19950124e-02, 1.38861606e-03, 1.64825443e-04, 4.03375390e+03,
#        3.00115234e+00], '40-44': [3.18850557e-02, 2.03426114e-03, 1.89829884e-04, 4.03375332e+03,
#        3.31945070e+00], '45-49': [8.68518610e-02, 2.97958732e-03, 1.90438885e-04, 4.03360002e+03,
#        7.55884335e+00], '50-54': [1.98824851e-01, 4.64771540e-03, 1.83848835e-04, 4.03359970e+03,
#        1.33870979e+01], '55-59': [1.30774922e-01, 6.23857513e-03, 1.59549298e-04, 4.03360000e+03,
#        5.87061596e+00], '60-64': [1.89571541e-01, 8.48295892e-03, 1.37839258e-04, 4.03361279e+03,
#        5.38297146e+00], '65-69': [2.67796749e-01, 1.13797592e-02, 1.18974761e-04, 4.03359993e+03,
#        5.01602422e+00], '70-74': [3.32398427e-01, 3.05557143e-02, 3.71073998e-02, 4.03359992e+03,
#        5.12727690e+00], '75-79': [6.62436740e-01, 1.58565037e-02, 8.77392465e-05, 4.03360000e+03,
#        4.89868423e+00], '80-84': [8.42368040e-01, 4.51464602e-02, 1.04032741e-04, 4.03360003e+03,
#        4.81895318e+00], '85-89': [9.50000000e-01, 7.99697993e-02, 1.00597436e-04, 4.03359985e+03,
#        4.25994593e+00], '90-94': [9.50000000e-01, 1.34576508e-01, 9.24853046e-05, 4.03359997e+03,
#        3.77743047e+00], '95+': [9.50000000e-01, 2.29473310e-01, 7.99842773e-05, 4.03360013e+03,
#        4.84094519e+00]}
# x_opt_sec = { '0-4': [2.09538542e-01, 2.28795601e-03, 1.84190989e-04, 4.03375616e+03,3.21676438e+00], 
#              '5-9': [2.16320231e-02, 1.25091149e-04, 1.80743111e-04, 4.03375404e+03,2.98169931e+00],
#              '10-14': [1.39321843e-02, 1.65097280e-04, 1.60845247e-04, 4.03375409e+03,3.87881670e+00], 
#              '15-19': [1.31748885e-02, 3.28812779e-04, 1.44209714e-04, 4.03375519e+03,2.97337561e+00], 
#              '20-24': [1.63860340e-02, 5.47120755e-04, 1.42380015e-04, 4.03395070e+03, 3.10357901e+00],
#              '25-29': [1.73774564e-02, 7.02850707e-04, 1.44606829e-04, 4.03375763e+03,3.06036465e+00], 
#              '30-34': [1.89198980e-02, 1.00662236e-03, 1.55104245e-04, 4.03374579e+03,3.04967065e+00],
#              '35-39': [2.19950124e-02, 1.38861606e-03, 1.64825443e-04, 4.03375390e+03,3.00115234e+00], 
#              '40-44': [3.18850557e-02, 2.03426114e-03, 1.89829884e-04, 4.03375332e+03,3.31945070e+00], 
#              '45-49': [8.68518610e-02, 2.97958732e-03, 1.90438885e-04, 4.03360002e+03,7.55884335e+00],
#              '50-54': [1.98824851e-01, 4.64771540e-03, 1.83848835e-04, 4.03359970e+03,1.33870979e+01], 
#              '55-59': [1.30774922e-01, 6.23857513e-03, 1.59549298e-04, 4.03360000e+03,5.87061596e+00],
#              '60-64': [1.89571541e-01, 8.48295892e-03, 1.37839258e-04, 4.03361279e+03,5.38297146e+00], 
#              '65-69': [2.67796749e-01, 1.13797592e-02, 1.18974761e-04, 4.03359993e+03,5.01602422e+00], 
#              '70-74': [4.15264402e-01, 1.75563875e-02, 1.19855147e-04, 4.03359992e+03, 5.00634734e+00],
#              '75-79': [5.97995344e-01, 3.10000000e-02, 1.29771447e-04, 4.03360004e+03,4.92345619e+00],
#              '80-84': [7.83520056e-01, 5.90000000e-02, 1.37066641e-04, 4.03360003e+03,4.82644680e+00],
#              '85-89': [8.92550549e-01, 9.80904556e-02, 1.30278970e-04, 4.03360006e+03,4.39232242e+00],
#              '90-94': [9.50000000e-01, 1.34576508e-01, 9.24853046e-05, 4.03359997e+03,3.77743047e+00]}

x_opt_one = {'0-4': [3.29366690e-01, 4.47288866e-03, 2.25445005e-04, 4.03359999e+03, 4.99916153e+00], 
'5-9': [3.57032659e-02, 9.07084962e-04, 3.00631711e-04, 4.03375413e+03,4.91008431e+00], 
'10-14': [5.12406631e-02, 6.91944425e-04, 3.72672844e-04, 4.03360031e+03, 1.25345174e+01],
'15-19': [7.55256514e-02, 1.07467182e-03, 3.50387946e-04, 4.03360003e+03, 1.72422963e+01], 
'20-24': [5.55208243e-02, 1.41634119e-03, 3.37722864e-04, 4.03360000e+03, 1.06316019e+01], 
'25-29': [4.81469654e-02, 1.57184100e-03, 3.40575528e-04, 4.03359999e+03,8.17548911e+00], 
'30-34': [2.91264547e-02, 1.83404084e-03, 3.73467796e-04, 4.03360000e+03, 3.86456502e+00], 
'35-39': [4.15492418e-02, 2.42893274e-03, 4.32410834e-04, 4.03373596e+03,4.45117078e+00], 
'40-44': [1.28862987e-01, 3.03524712e-03, 3.82285852e-04, 4.03360001e+03,1.21430982e+01], 
'45-49': [9.68354163e-02, 3.82621927e-03, 3.04498273e-04, 4.03360002e+03,7.55878073e+00], 
'50-54': [2.07904824e-01, 5.40623483e-03, 2.47960641e-04, 4.03359970e+03,1.33870558e+01], 
'55-59': [1.31924180e-01, 8.22767884e-03, 2.47729928e-04, 4.03360000e+03,5.87059765e+00], 
'60-64': [1.81831945e-01, 1.27089904e-02, 2.32252073e-04, 4.03361279e+03,5.38380610e+00],
'65-69':[2.47945819e-01, 1.85950642e-02, 2.06963403e-04, 4.03359993e+03, 5.01674664e+00], 
'70-74': [3.45775156e-01, 3.12212808e-02, 2.02946259e-04, 4.03359992e+03,5.01713044e+00], 
'75-79': [4.93991129e-01, 5.07264165e-02, 2.13571055e-04, 4.03360000e+03,4.93760304e+00], 
'80-84': [7.22843595e-01, 6.95946134e-02, 1.62187132e-04, 4.03360002e+03, 4.83421470e+00], 
'85-89': [8.54093247e-01, 1.05730117e-01, 1.44221543e-04, 4.03360012e+03,4.39632815e+00], 
'90-94': [8.90333669e-01, 1.51248942e-01, 1.17611119e-04, 4.03359997e+03,3.78848652e+00], 
'95+': [1.5,0.27996561,0.0004889235, 4033.6 ,4.862572]}


#calib = DeathRateCalib()
# calib.loop_for_estimation(x_opt)
calib.x_opts_comparison(x_opt_one, x_opt_sec)

